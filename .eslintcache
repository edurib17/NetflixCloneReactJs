[{"/home/eduardo/Documentos/React/netflixclone/src/index.js":"1","/home/eduardo/Documentos/React/netflixclone/src/App.js":"2","/home/eduardo/Documentos/React/netflixclone/src/Tmdb.js":"3","/home/eduardo/Documentos/React/netflixclone/src/components/MovieRow.js":"4","/home/eduardo/Documentos/React/netflixclone/src/components/FeaturedMovie.js":"5","/home/eduardo/Documentos/React/netflixclone/src/components/Header.js":"6"},{"size":200,"mtime":1612192098326,"results":"7","hashOfConfig":"8"},{"size":2089,"mtime":1612361221611,"results":"9","hashOfConfig":"8"},{"size":2684,"mtime":1612218547707,"results":"10","hashOfConfig":"8"},{"size":1756,"mtime":1612360623337,"results":"11","hashOfConfig":"8"},{"size":1833,"mtime":1612308985076,"results":"12","hashOfConfig":"8"},{"size":687,"mtime":1612290198466,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"txxinl",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"16"},"/home/eduardo/Documentos/React/netflixclone/src/index.js",[],["31","32"],"/home/eduardo/Documentos/React/netflixclone/src/App.js",["33"],"/home/eduardo/Documentos/React/netflixclone/src/Tmdb.js",["34"],"const API_KEY = '0829461798edc6173192a691b772c809';\nconst API_BASE = 'https://api.themoviedb.org/3';\n\n/*\n-originais da netflix\n-recomendados (trending)\n-em alta (top rated)\n-ação\n-comédia\n-terror\n-romance\n-documentarios\n*/\n\nconst basicFetch = async (endpoint) => {\n    const req = await fetch(`${API_BASE}${endpoint}`);\n    const json = await req.json();\n    return json;\n}\nexport default {\n    getHomeList: async () => {\n        return [\n            {\n                slug: 'originals',\n                title: 'Originais do Netflix',\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'trending',\n                title: 'Recomendados para Você',\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'toprated',\n                title: 'Em Alta',\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'action',\n                title: 'Ação',\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'Comédia',\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Terror',\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'Documentários',\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\n            },\n        ];\n    },\n    getMovieInfo: async (movieId, type) => {\n        let info = {};\n\n        if (movieId) {\n            switch (type) {\n                case 'movie':\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n                    break;\n                case 'tv':\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n                    break;\n                    default:\n                        info=null;\n                    break;    \n            }\n        }\n         return info;\n    }\n}","/home/eduardo/Documentos/React/netflixclone/src/components/MovieRow.js",["35"],"import React, { useState } from 'react';\nimport './MovieRow.css';\n\n//Icones\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nexport default ({ title, items }) => {\n    const [scrollX, setScrollX] = useState(-400);\n\n    const handerLeftArrow = () => {\n        let x = scrollX + Math.round(window.innerWidth / 2);\n        if (x > 0) {\n            x = 0;\n        }\n        setScrollX(x);\n    }\n\n    const handerRightArrow = () => {\n        let x = scrollX - Math.round(window.innerWidth / 2);\n        let listW = items.results.length * 150;\n        if ((window.innerWidth - listW) > x) {\n            x = (window.innerWidth - listW) - 60;\n        }\n        setScrollX(x);\n    }\n    return (\n        <div className=\"movieRow\">\n            <h2>{title}</h2>\n            <div className=\"movieRow--left\" onClick={handerLeftArrow}>\n                <NavigateBeforeIcon style={{ fontSize: 50 }} />\n            </div>\n            <div className=\"movieRow--right\" onClick={handerRightArrow}>\n                <NavigateNextIcon style={{ fontSize: 50 }} />\n\n            </div>\n            <div className=\"movieRow--listarea\">\n                <div className=\"movieRow--list\" style={{\n                    marginLeft: scrollX,\n                    width: items.results.length * 150\n                }}>\n                    {items.results.length > 0 && items.results.map((item, key) => (\n                        <div key={key} className=\"movieRow--item\">\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    )\n}","/home/eduardo/Documentos/React/netflixclone/src/components/FeaturedMovie.js",["36"],"import React from 'react';\nimport './FeaturedMovie.css';\n\nexport default ({ item }) => {\n    let description = item.overview\n    if (description.length > 200) {\n      description = description.substring(0, 200) + ' ...'\n    }\n\n    //Pegar data de lançamento do filmes\n    let firstDate = new Date(item.first_air_date);\n    //Ṕegar Genero dos filmes\n    let genres = [];\n    for (let i in item.genres) {\n        genres.push(item.genres[i].name);\n    }\n    return (\n        <section className=\"featured\" style={{\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\n        }}>\n            <div className=\"featured--vertical\">\n                <div className=\"featured--horizontal\">\n                    <div className=\"featured--name\">{item.original_name}</div>\n                    <div className=\"featured--info\">\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\n                    </div>\n                    <div className=\"featured--description\">{description}</div>\n                    <div className=\"featured--buttons\">\n                        <a className=\"featured--watchbutton\" href={`/watch/${item.id}`}>▶ Assistir</a>\n                        <a className=\"featured--mylistbutton\" href={`/list/add${item.id}`}>+ Minha Lista</a>\n                    </div>\n                    <div className=\"featured--genres\"><strong>Gêneros:</strong> {genres.join(', ')}</div>\n                </div>\n            </div>\n        </section>\n    );\n}","/home/eduardo/Documentos/React/netflixclone/src/components/Header.js",["37"],"import React from 'react';\nimport './Header.css';\n\nexport default ({black}) => {\n    return (\n        <header className={black ? 'black':''}>\n            <div className=\"header--logo\">\n                <a href=\"/\">\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png \" alt=\"Netflix\" />\n                </a>\n            </div>\n            <div className=\"header--user\">\n                <a href=\"/\">\n                    <img src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"Usuário\"></img>\n                </a>\n            </div>\n        </header>\n    );\n}\n\n",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":11,"column":1,"nodeType":"44","endLine":76,"endColumn":2},{"ruleId":"42","severity":1,"message":"45","line":20,"column":1,"nodeType":"44","endLine":83,"endColumn":2},{"ruleId":"42","severity":1,"message":"43","line":8,"column":1,"nodeType":"44","endLine":51,"endColumn":2},{"ruleId":"42","severity":1,"message":"43","line":4,"column":1,"nodeType":"44","endLine":41,"endColumn":2},{"ruleId":"42","severity":1,"message":"43","line":4,"column":1,"nodeType":"44","endLine":19,"endColumn":2},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","no-global-assign","no-unsafe-negation"]